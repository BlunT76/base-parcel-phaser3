{"mappings":"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","sources":["index.js","scenes/level1.js"],"sourcesContent":["import Phaser from 'phaser'\nimport Level1 from './scenes/level1'\n\nvar config = {\n    type: Phaser.AUTO,\n    width: 800,\n    height: 640,\n    physics: {\n        default: 'arcade',\n        arcade: {\n            debug: true,\n            gravity: {y:0},\n        }\n    },\n    scene: [Level1],\n    scale: {\n        zoom: 2,\n    }\n\n};\n\n\nvar game = new Phaser.Game(config);","class Level1 extends Phaser.Scene {\n    constructor() {\n        super({key: \"Level1\" });\n  }\n    preload () {\n        \n        \n        this.load.aseprite('alco', '../assets/animations/StrongAlc.png', '../assets/animations/StrongAlc.json');\n        this.load.aseprite('chef', '../assets/animations/alcochef.png', '../assets/animations/alcochef.json');\n\n        this.load.image('tileset', '../assets/maps/tileset2.png');\n        this.load.tilemapTiledJSON('level1', '../assets/maps/level1.json');\n        \n\n    }\n\n    create () {\n\n        // this.cameras.main.setBackgroundColor('#FFFFFF')\n\n        // this.cameras.main.setZoom(1)\n\n        this.cursors = this.input.keyboard.createCursorKeys();\n        this.width = 800;\n        this.height = 640;\n\n        const map = this.make.tilemap({ key: \"level1\", tileWidth: 32, tileHeight: 32 });\n        console.log(map)\n        const tileset = map.addTilesetImage('tileset3', 'tileset');\n        console.log(tileset)\n        const layer = map.createLayer('groundlayer', tileset);\n        console.log(layer)\n        let playerPoints = 0;\n\n        this.keyF = this.input.keyboard.addKey(Phaser.Input.Keyboard.KeyCodes.F);\n        this.keyW = this.input.keyboard.addKey(Phaser.Input.Keyboard.KeyCodes.W);\n        this.keyD = this.input.keyboard.addKey(Phaser.Input.Keyboard.KeyCodes.D);\n        this.keyA = this.input.keyboard.addKey(Phaser.Input.Keyboard.KeyCodes.A);\n\n\n        this.anims.createFromAseprite('chef', [ 'idleburp', 'standingattack', 'jump', 'run' ]);\n        this.anims.createFromAseprite('alco');\n\n        const alco = this.physics.add.sprite(this.width/2, (this.height /2) -50, 'alco');\n        this.chef = this.physics.add.sprite(this.width/50, this.height/2.5, 'chef');\n\n        alco.body.setAllowGravity(false);\n\n        this.chef.body.setCollideWorldBounds(true)\n\n        this.chef.sideFacing = 'right'\n        this.chef.movingX = false;\n        this.chef.onGround = false;\n\n        function colliderAlco() {\n            playerPoints ++\n            console.log(playerPoints)\n            alco.destroy();\n            // alco.disableBody(true, true)\n        }\n        \n\n\n        this.chef.play({key: 'idleburp', repeat: -1, ignoreIfPlaying: false})\n        alco.play({key: 'rotatinglabel', repeat: -1})\n\n        this.physics.add.overlap(this.chef, alco, colliderAlco, null, this)\n     \n    }\n\n    update() {\n\n        //Horizontal Movements\n        if(this.keyD.isDown || this.cursors.right.isDown) {\n            this.chef.body.setVelocityX(100);\n            this.chef.play({key: 'run', repeat: 0, ignoreIfPlaying: true})\n            this.chef.movingX = true\n            this.chef.flipX = false\n\n            if(this.chef.facing === 'left') {\n                return this.chef.facing === 'right'\n            }\n\n        } else if(this.keyA.isDown || this.cursors.left.isDown) {\n            this.chef.play({key: 'run', repeat: 0, ignoreIfPlaying: true})\n            this.chef.movingX = true\n            this.chef.body.setVelocityX(-100);\n            this.chef.flipX = true\n\n            if(this.chef.facing === 'right') {\n                return this.chef.facing === 'left'\n            }\n        } else {\n            this.chef.setVelocityX(0)\n            this.chef.movingX = false\n        }\n\n        //Vertical Movements\n\n        groundedCheck(this.physics, this.chef)\n        if(this.keyW.isDown || this.cursors.up.isDown) {\n\n            if(this.chef.onGround = true) {\n                this.chef.play({key: 'jump', repeat: 0,  ignoreIfPlaying: true})\n                this.chef.movingY = true\n                this.chef.setVelocityY(-100)\n                this.chef.setGravityY(200)\n            } \n\n        }\n        \n        //Attacks\n        if(this.keyF.isDown) { \n            this.chef.play({key: 'standingattack', repeat: 0, ignoreIfPlaying: true})\n            this.chef.attacking = true\n        }\n\n        if(this.chef.attacking == false && this.chef.movingX == false && this.chef.movingY == false) {\n            this.chef.play({key: 'idleburp', repeat: 0, ignoreIfPlaying: true})\n\n\n        }\n\n        // if (this.chef.body.velocity.x < 0.5 && this.chef.body.velocity.x > -0.5) {\n        //     const idleStance = function(sprite) {\n        //         sprite.anims.stop();\n        //         return function(sprite) {\n        //             sprite.play({key: 'idleburp', repeat: -1, ignoreIfPlaying: false})\n        //         }\n\n        //     }\n\n        //     idleStance(this.chef)\n\n        // }\n\n\n        \n    }\n}\n\nfunction destroySprite(sprite) {\n\n    sprite.destroy();\n\n}\n\nfunction groundedCheck(physics, sprite, ground) {\n    if(physics.add.collider(sprite, ground) == true) {\n        sprite.onGround = true\n    } else {\n        sprite.onGround = false\n    }\n}\n\nexport default Level1;"],"names":[],"version":3,"file":"index.js.map","sourceRoot":"../"}